package com.chinaops.web.agent.controller;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.chinaops.web.agent.entity.Agent;
import com.chinaops.web.agent.entity.File;
import com.chinaops.web.agent.entity.Page;
import com.chinaops.web.agent.entity.User;
import com.chinaops.web.agent.service.AgentService;
import com.chinaops.web.agent.service.FileService;
import com.chinaops.web.agent.service.UserService;
import com.chinaops.web.agent.util.AgentFileUtil;
import com.chinaops.web.agent.util.CookieUtil;

@Controller
public class FileAgentController{
	private final Log log = LogFactory.getLog(this.getClass());
	
	private AgentService agentService;
	
	private FileService fileService;
	
	private UserService userService;
	
	@Autowired
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	@Autowired
	public void setAgentService(AgentService agentService) {
		this.agentService = agentService;
	}

	@Autowired
	public void setFileService(FileService fileService) {
		this.fileService = fileService;
	}
	

	/**
	 * Description: 得到所有的agent
	 * @Version 1.0 2013-7-15 上午11:15:57崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @return
	 */
	@RequestMapping(value = "/get_all_agents.do", method = RequestMethod.POST)
	public @ResponseBody
	List<Agent> getAgents() {
		List<Agent> agentList = agentService.getAllAgents();
		return agentList;
	}
	
	/**
	 * Description: 得到所有的file
	 * @Version 1.0 2013-7-15 上午11:16:14崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @return
	 */
	@RequestMapping(value = "/get_all_files.do", method = RequestMethod.POST)
	public @ResponseBody
	List<File> getFiles() {
		List<File> fileList = fileService.getAllFiles();
		return fileList;
	}
	
	/**
	 * Description: 根据类型分别插入数据库
	 * @Version 1.0 2013-7-15 上午11:16:34崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param filetype
	 * @param version
	 * @param md5sum
	 * @param filename
	 * @param arch
	 * @param ostype
	 */
	@RequestMapping(value = "/insert_agent_or_file.do", method = RequestMethod.POST)
	public @ResponseBody
	String createAgentFile(@RequestParam String filetype,@RequestParam String version,@RequestParam String md5sum,@RequestParam String name,
			@RequestParam String filename,@RequestParam String arch,@RequestParam String ostype,@RequestParam String downloaduri,@RequestParam String loadonstartup,@RequestParam String haomiao,@RequestParam String chuanStatus) {
		String result = "0";
		String year = downloaduri.substring(0, 4);
		String month = downloaduri.substring(4, 6);
		String day = downloaduri.substring(6, 8);
		String nameOfFile = downloaduri.substring(8);
		//String uri = "download" + java.io.File.separatorChar +"agent" + java.io.File.separatorChar + year + java.io.File.separatorChar + month + java.io.File.separatorChar + day + java.io.File.separatorChar + nameOfFile;
		String uri = "download/agent/" + year + "/" + month + "/" + day + "/" + haomiao + "/" + nameOfFile;
		if(filetype.equals("2")){
			Agent agent = new Agent();
			agent.setName(name);
			agent.setFilename(filename);
			agent.setDownloaduri(uri);
			agent.setVersion(version);
			agent.setMd5sum(md5sum);
			agent.setArch(arch);
			agent.setOstype(ostype);
			agent.setStatus(Integer.parseInt(chuanStatus));
			agent.setLoadonstartup(Integer.parseInt(loadonstartup));
			agentService.createAgent(agent);
			result = "1";
		}else{
			File file = new File();
			file.setFilename(filename);
			file.setDownloaduri(uri);
			file.setMd5sum(md5sum);
			file.setArch(arch);
			file.setOstype(ostype);
			file.setStatus(Integer.parseInt(chuanStatus));
			fileService.createFile(file);
			result = "2";
		}
		return result;
	}
	
	/**
	 * Description: 发布
	 * @Version 1.0 2013-7-15 上午11:17:46崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param ostype
	 * @param arch
	 * @return
	 */
	@RequestMapping(value = "/release_agent_and_file.do", method = RequestMethod.POST)
	public @ResponseBody String releaseAgentFile(@RequestParam String ostype,
			@RequestParam String arch) {
		String result = "0";
		//List<AgentFile> agentFiles = agentFileManager
		//		.getAgentFile(ostype, arch);
		List<Agent> agents = agentService.getAgentsByOstypeArch(ostype, arch);
		List<File> files = fileService.getFilesByOstypeArch(ostype, arch);
		try {
			String filename = ostype + "_" + arch + ".xml";
			String path = AgentFileUtil.getDirByOs() + filename;
			
			String classname = this.getClass().toString();
			 String pathname = this.getClass()
			         .getResource(classname.substring(classname.lastIndexOf(".") + 1) + ".class")
			         .getPath();
			String propath = pathname.substring(0, pathname.indexOf("/WEB-INF"))  +java.io.File.separatorChar + "download" +java.io.File.separatorChar  + filename;
			
			
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");// 设置日期格式
			Document document = DocumentHelper.createDocument();
			document.setXMLEncoding("UTF-8");
			Element rootElement = document.addElement("UpdateInfo");
			rootElement.addElement("UpdateTime").addText(df.format(new Date()));
			boolean flag = false;
			
			for (Agent agent : agents) {
				if(agent.getStatus()==1){
					flag = true;
					Element agentElement = rootElement.addElement("Agent");
					agentElement.addElement("Name").addText(agent.getName());
					agentElement.addElement("Filename")
						.addText(agent.getFilename());
					agentElement.addElement("DownloadURI")
							.addText(agent.getDownloaduri());
					agentElement.addElement("Md5sum")
							.addText(agent.getMd5sum());
					agentElement.addElement("Version")
					.addText(agent.getVersion());
					agentElement.addElement("LoadOnStartup").addText(String.valueOf(agent.getLoadonstartup()));
					agent.setStatus(2);
					agentService.updateAgent(agent);
				}
			}
			for (File file : files) {
				if(file.getStatus()==1){
					flag = true;
					Element fileElement = rootElement.addElement("File");
					fileElement.addElement("Filename")
						.addText(file.getFilename());
					fileElement.addElement("DownloadURI")
							.addText(file.getDownloaduri());
					fileElement.addElement("Md5sum")
							.addText(file.getMd5sum());
					file.setStatus(2);
					fileService.updateFile(file);
				}
			}
			if(flag){
				java.io.File xmlfile = new java.io.File(propath);
				if (xmlfile.exists()) {
					xmlfile.createNewFile();
				}
				FileOutputStream fos = new FileOutputStream(xmlfile);
				OutputFormat format = OutputFormat.createPrettyPrint();
				format.setEncoding("utf-8");
				XMLWriter writer = new XMLWriter(fos, format);
				result = "1";
				writer.write(document);
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		log.debug("result = " +  result);
		return result;
	}
	
	/**
	 * Description: 根据操作系统类型和位数来查询
	 * @Version 1.0 2013-7-15 上午11:18:13崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param ostype
	 * @param arch
	 * @return
	 */
	@RequestMapping(value = "/look_agent.do", method = RequestMethod.POST)
	public @ResponseBody List<Agent> lookAgent(@RequestParam String ostype,
			@RequestParam String arch) {
		List<Agent> agents = new ArrayList<Agent>();
		List<Agent> as = agentService.getAgentsByOstypeArch(ostype, arch);
		Agent age = new Agent();
		boolean flag = true;
		for(Agent agent : as){
			if(agent.getStatus()==1){
				flag = false;
				agents.add(agent);
			}
		}
		if(flag){
			age.setMd5sum("0");
			agents.add(age);
		}
		return agents;
	}
	
	/**
	 * Description: 根据操作系统类型和位数来查询
	 * @Version 1.0 2013-8-26 下午05:46:29崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param ostype
	 * @param arch
	 * @return
	 */
	@RequestMapping(value = "/look_agent_by_osarch.do", method = RequestMethod.POST)
	public @ResponseBody Page lookAgentByOSArch(@RequestParam String ostype,@RequestParam String arch,
			@RequestParam String status,@RequestParam String StringPageNum,@RequestParam String StringPageSize) {
		int pageNo = Integer.parseInt(StringPageNum);
		int pageSize = Integer.parseInt(StringPageSize);
		if (pageNo <= 1) {
			pageNo = 1;
		}
		Page p = this.agentService.getAgentsByPage(ostype, arch, status, pageNo, pageSize);
		return p;
	}
	
	/**
	 * Description: 根据操作系统类型和位数来查询
	 * @Version 1.0 2013-8-26 下午05:49:43崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param ostype
	 * @param arch
	 * @return
	 */
	@RequestMapping(value = "/look_file_by_osarch.do", method = RequestMethod.POST)
	public @ResponseBody Page lookFileByOSArch(@RequestParam String ostype,@RequestParam String arch,
			@RequestParam String status,@RequestParam String StringPageNum,@RequestParam String StringPageSize) {
		int pageNo = Integer.parseInt(StringPageNum);
		int pageSize = Integer.parseInt(StringPageSize);
		if (pageNo <= 1) {
			pageNo = 1;
		}
		Page p = this.fileService.getFilesByPage(ostype, arch, status, pageNo, pageSize);
		return p;
	}
	
	/**
	 * Description: 查询已经发布的xml
	 * @Version 1.0 2013-8-19 上午09:24:46崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param ostype
	 * @param arch
	 * @return
	 */
	@RequestMapping(value = "/look_agent_by_status.do", method = RequestMethod.POST)
	public @ResponseBody String lookPublishedAgent(@RequestParam String ostype,
			@RequestParam String arch) {
		String filename = ostype + "_" + arch + ".xml";
    	org.jdom.Document document=null; 
    	StringWriter out=null; //输出对象   
    	String sReturn =""; //输出字符串   
    	SAXBuilder reader = new SAXBuilder();   
		String classname = this.getClass().toString();
		String pathname = this.getClass()
		         .getResource(classname.substring(classname.lastIndexOf(".") + 1) + ".class")
		         .getPath();
		String propath = pathname.substring(0, pathname.indexOf("/WEB-INF"))  +java.io.File.separatorChar + "download" +java.io.File.separatorChar  + filename;
		
		java.io.File xmlfile = new java.io.File(propath);
		if (xmlfile.exists()) {
			try {
				document=reader.build(new java.io.File(propath));
				 Format format =Format.getPrettyFormat();      
				 format.setEncoding("UTF-8");//设置编码格式    
				XMLOutputter outputter =new XMLOutputter();   
				out=new StringWriter();   
				 outputter.output(document,out);  
				 sReturn=out.toString();  
			} catch (JDOMException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
    	return sReturn;
	}
	
	/**
	 * Description:查询cookie里面的agent 
	 * @Version 1.0 2013-8-8 下午05:14:22崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param ostype
	 * @param arch
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/look_agnet_by_cookie.do", method = RequestMethod.POST)
	public @ResponseBody List<Agent> lookAgentByCookie(@RequestParam String ostype,
			@RequestParam String arch,HttpServletRequest request,HttpServletResponse response) {
		List<Agent> agents = new ArrayList<Agent>();
		Agent agent = new Agent();
		boolean flag = true;
		try {
			String ids = CookieUtil.findCookie("agent", request);
			if(ids != null && !ids.equals("")){
				String[] id = ids.split("_");
				for(int i=0;i<id.length;i++){
					Agent a = agentService.getAgentById(Integer.parseInt(id[i]));
					if(a.getArch().equals(arch)&&a.getOstype().equals(ostype)){
						flag = false;
						a.setStatus(1);
						agentService.updateAgent(a);
						agents.add(a);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if(flag){
			agent.setMd5sum("0");
			agents.add(agent);
		}
		
		return agents;
	}
	
	/**
	 * Description: 根据操作系统类型和位数来查询
	 * @Version 1.0 2013-7-15 上午11:18:33崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param ostype
	 * @param arch
	 * @return
	 */
	@RequestMapping(value = "/look_file.do", method = RequestMethod.POST)
	public @ResponseBody List<File> lookFile(@RequestParam String ostype,
			@RequestParam String arch) {
		List<File> fs = fileService.getFilesByOstypeArch(ostype, arch);
		List<File> files = new ArrayList<File>();
		File f = new File();
		boolean flag = true;
		for(File file : fs){
			if(file.getStatus()==1){
				flag = false;
				files.add(file);
			}
		}
		if(flag){
			f.setMd5sum("0");
			files.add(f);
		}
		return files;
	}
	
	/**
	 * Description: 查询已经发布的的xml
	 * @Version 1.0 2013-8-19 上午09:05:24崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param ostype
	 * @param arch
	 * @return
	 */
	@RequestMapping(value = "/look_file_by_status.do", method = RequestMethod.POST)
	public @ResponseBody List<File> lookPublishedFile(@RequestParam String ostype,
			@RequestParam String arch) {
		List<File> fs = fileService.getFilesByOstypeArch(ostype, arch);
		List<File> files = new ArrayList<File>();
		File f = new File();
		boolean flag = true;
		for(File file : fs){
			if(file.getStatus()==2){
				flag = false;
				files.add(file);
			}
		}
		if(flag){
			f.setMd5sum("0");
			files.add(f);
		}
		return files;
	}
	
	/**
	 * Description: 查询cookie里面的file
	 * @Version 1.0 2013-8-8 下午05:15:03崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param ostype
	 * @param arch
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/look_file_by_cookie.do", method = RequestMethod.POST)
	public @ResponseBody List<File> lookFileByCookie(@RequestParam String ostype,
			@RequestParam String arch,HttpServletRequest request,HttpServletResponse response) {
		List<File> files = new ArrayList<File>();
		File file = new File();
		boolean flag = true;
		try {
			String ids = CookieUtil.findCookie("file", request);
			if(ids != null && !ids.equals("")){
				String[] id = ids.split("_");
				for(int i=0;i<id.length;i++){
					File f = fileService.getFileById(Integer.parseInt(id[i]));
					if(f.getArch().equals(arch)&&f.getOstype().equals(ostype)){
						flag = false;
						f.setStatus(1);
						fileService.updateFile(f);
						files.add(f);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if(flag){
			file.setMd5sum("0");
			files.add(file);
		}
		
		return files;
	}
	
	/**
	 * Description: 根据id得到agent
	 * @Version 1.0 2013-7-15 上午11:18:51崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/get_agent_by_id.do", method = RequestMethod.POST)
	public @ResponseBody Agent getAgentById(@RequestParam String id) {
		Agent agent = agentService.getAgentById(Integer.parseInt(id));
		return agent;
	}
	
	/**
	 * Description: 修改agent
	 * @Version 1.0 2013-7-15 上午11:19:16崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param ostype
	 * @param id
	 * @param status
	 * @param md5sum
	 * @param arch
	 * @param version
	 * @param filename
	 * @param downloaduri
	 * @return
	 */
	@RequestMapping(value = "/modify_agent.do", method = RequestMethod.POST)
	public @ResponseBody
	Agent updateAgentFile(@RequestParam String name,@RequestParam String ostype,@RequestParam String id,@RequestParam String status,@RequestParam String md5sum,
			@RequestParam String arch,@RequestParam String version,@RequestParam String filename,@RequestParam String downloaduri,@RequestParam String loadonstartup) {
		Agent agent = new Agent();
		agent.setName(name);
		agent.setArch(arch);
		agent.setId(Integer.parseInt(id));
		agent.setOstype(ostype);
		agent.setStatus(Integer.parseInt(status));
		agent.setVersion(version);
		agent.setMd5sum(md5sum);
		agent.setDownloaduri(downloaduri);
		agent.setFilename(filename);
		agent.setLoadonstartup(Integer.parseInt(loadonstartup));
		agentService.updateAgent(agent);
		return agent;
	}
	
	/**
	 * Description: 根据id获得file
	 * @Version 1.0 2013-7-15 上午11:19:52崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/get_file_by_id.do", method = RequestMethod.POST)
	public @ResponseBody File getFileById(@RequestParam String id) {
		File file = fileService.getFileById(Integer.parseInt(id));
		return file;
	}
	
	/**
	 * Description: 修改file
	 * @Version 1.0 2013-7-15 上午11:20:25崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param ostype
	 * @param id
	 * @param status
	 * @param arch
	 * @param filename
	 * @param downloaduri
	 * @param md5sum
	 * @return
	 */
	@RequestMapping(value = "/modify_file.do", method = RequestMethod.POST)
	public @ResponseBody
	File updateFile(@RequestParam String ostype,@RequestParam String id,@RequestParam String status,
			@RequestParam String arch,@RequestParam String filename,@RequestParam String downloaduri,@RequestParam String md5sum) {
		File file = new File();
		file.setArch(arch);
		file.setId(Integer.parseInt(id));
		file.setOstype(ostype);
		file.setStatus(Integer.parseInt(status));
		file.setMd5sum(md5sum);
		file.setDownloaduri(downloaduri);
		file.setFilename(filename);
		fileService.updateFile(file);
		return file;
	}
	
	/**
	 * Description: 删除agent
	 * @Version 1.0 2013-7-15 上午11:20:35崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/delete_agent.do", method = RequestMethod.POST)
	public @ResponseBody Agent deleteAgent(@RequestParam String id) {
		Agent agent = new Agent();
		agentService.deleteAgent(Integer.parseInt(id));
		return agent;
	}
	
	/**
	 * Description: 删除file
	 * @Version 1.0 2013-7-15 上午11:20:50崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/delete_file.do", method = RequestMethod.POST)
	public @ResponseBody File deleteFile(@RequestParam String id) {
		File file = new File();
		fileService.deleteFile(Integer.parseInt(id));
		return file;
	}
	
	/**
	 * Description:添加agent到cookie 
	 * @Version 1.0 2013-7-15 上午11:21:32崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param id
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/add_agent_to_cookie.do", method = RequestMethod.POST)
	public @ResponseBody String addAgent(@RequestParam String id,HttpServletRequest request,HttpServletResponse response) {
		String result = "0";
		try {
			String old_ids = CookieUtil.findCookie("agent", request);
			if(old_ids != null  && !old_ids.equals("")){
				boolean b = old_ids.contains("_");
				String[] old_id = old_ids.split("_");
				if(!b){
					if(Integer.parseInt(old_ids) != Integer.parseInt(id)){
						String new_id = old_ids + "_" + id;
						CookieUtil.addCookie("agent", new_id, response);
					}else{
						result = "1";
					}
					
				}else{
					boolean flag = true;
					for(int i=0;i<old_id.length;i++){
						if(old_id[i].equals(id)){
							flag = false;
						}
					}
					if(flag){
						String new_id = old_ids + "_" + id;
						CookieUtil.addCookie("agent", new_id, response);
					}else{
						result = "1";
					}
				}
			}else{
				CookieUtil.addCookie("agent", id, response);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	/**
	 * Description: 添加file到cookie
	 * @Version 1.0 2013-7-15 上午11:21:45崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param id
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/add_file_to_cookie.do", method = RequestMethod.POST)
	public @ResponseBody String addFile(@RequestParam String id,HttpServletRequest request,HttpServletResponse response) {
		String result = "0";
		try {
			String old_ids = CookieUtil.findCookie("file", request);
			if(old_ids != null  && !old_ids.equals("")){
				String[] old_id = old_ids.split("_");
				boolean b = old_ids.contains("_");
				if(!b){
					if(Integer.parseInt(old_ids) != Integer.parseInt(id)){
						String new_id = old_ids + "_" + id;;
						CookieUtil.addCookie("file", new_id, response);
					}else{
						result = "1";
					}
					
				}else{
					boolean flag = true;
					for(int i=0;i<old_id.length;i++){
						if(old_id[i].equals(id)){
							flag = false;
						}
					}
					if(flag){
						String new_id = old_ids + "_" + id;
						CookieUtil.addCookie("file", new_id, response);
					}else{
						result = "1";
					}
				}
			}else{
				CookieUtil.addCookie("file", id, response);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	/**
	 * Description: 显示cookie的内容
	 * @Version 1.0 2013-7-15 上午11:22:00崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/show_agent_in_cookie.do", method = RequestMethod.POST)
	public @ResponseBody List<Agent> showAgent(HttpServletRequest request,HttpServletResponse response) {
		//Agent agent = new Agent();
		List<Agent> agents = new ArrayList<Agent>();
		Agent agent = new Agent();
		try {
			String ids = CookieUtil.findCookie("agent", request);
			if(ids != null && !ids.equals("")){
				String[] id = ids.split("_");
				for(int i=0;i<id.length;i++){
					agents.add(agentService.getAgentById(Integer.parseInt(id[i])));
				}
			}else{
				agent.setMd5sum("0");
				agents.add(agent);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return agents;
	}
	
	/**
	 * Description: 显示file
	 * @Version 1.0 2013-7-15 上午11:22:34崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/show_file_in_cookie.do", method = RequestMethod.POST)
	public @ResponseBody List<File> showFile(HttpServletRequest request,HttpServletResponse response) {
		//Agent agent = new Agent();
		List<File> files = new ArrayList<File>();
		File file = new File();
		try {
			String ids = CookieUtil.findCookie("file", request);
			if(ids != null && !ids.equals("")){
				String[] id = ids.split("_");
				for(int i=0;i<id.length;i++){
					files.add(fileService.getFileById(Integer.parseInt(id[i])));
				}
			}else{
				file.setMd5sum("0");
				files.add(file);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return files;
	}
	
	@RequestMapping(value = "/delete_agent_by_cookie.do", method = RequestMethod.POST)
	public @ResponseBody String deleteAgentByCookie(@RequestParam String id,HttpServletRequest request,HttpServletResponse response) {
		String result = "0";
		String new_id = "";
		try {
			String ids = CookieUtil.findCookie("agent", request);
			CookieUtil.deleteCookie("agent", response);
			if(ids != null && !ids.equals("")){
				String[] old_id = ids.split("_");
				for(int i=0;i<old_id.length;i++){
					if(!id.equals(old_id[i])){
						new_id = old_id[i] + "_" + new_id;
					}
					result = "1";
				}
			}
			if(new_id.length()>=1){
				new_id = new_id.substring(0,new_id.length()-1);
			}
			CookieUtil.addCookie("agent", new_id, response);
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return result;
	}
	
	/**
	 * Description: 删除cookie中的file
	 * @Version 1.0 2013-8-8 下午05:16:07崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param id
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/delete_file_by_cookie.do", method = RequestMethod.POST)
	public @ResponseBody String deleteFileByCookie(@RequestParam String id,HttpServletRequest request,HttpServletResponse response) {
		String result = "0";
		String new_id = "";
		try {
			String ids = CookieUtil.findCookie("file", request);
			CookieUtil.deleteCookie("file", response);
			if(ids != null && !ids.equals("")){
				String[] old_id = ids.split("_");
				for(int i=0;i<old_id.length;i++){
					if(!id.equals(old_id[i])){
						new_id = old_id[i] + "_" + new_id;
					}
					result = "1";
				}
			}
			if(new_id.length()>=1){
				new_id = new_id.substring(0,new_id.length()-1);
			}
			CookieUtil.addCookie("file", new_id, response);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return result;
	}
	
	/**
	 * Description: 根据cookie里面的内容发布
	 * @Version 1.0 2013-7-16 下午02:15:39崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param ostype
	 * @param arch
	 * @return
	 */
	@RequestMapping(value = "/release_agent_and_file_by_cookie.do", method = RequestMethod.POST)
	public @ResponseBody String releaseAgentFileByCookie(@RequestParam String ostype,
			@RequestParam String arch,HttpServletRequest request,HttpServletResponse response) {
		String result = "0";
		String new_agent_id = "";
		String new_file_id = "";
		//List<AgentFile> agentFiles = agentFileManager
		//		.getAgentFile(ostype, arch);
		List<Agent> agents = new ArrayList<Agent>();
		List<File> files = new ArrayList<File>();
		Agent agentCookie = new Agent();
		File fileCookie = new File();
		try {
			String cookieagents = CookieUtil.findCookie("agent", request);
			CookieUtil.deleteCookie("agent", response);
			if(cookieagents != null && !cookieagents.equals("")){
				String[] agent_ids = cookieagents.split("_");
				for(int i=0;i<agent_ids.length;i++){
					agentCookie = agentService.getAgentById(Integer.parseInt(agent_ids[i]));
					if(agentCookie.getArch().equals(arch)&&agentCookie.getOstype().equals(ostype)){
						agentCookie.setStatus(2);
						agentService.updateAgent(agentCookie);
						agents.add(agentCookie);
					}else{
						new_agent_id = agent_ids[i] + "_" + new_agent_id;
					}
				}
			}
			if(new_agent_id.length()>=1){
				new_agent_id = new_agent_id.substring(0,new_agent_id.length()-1);
			}
			CookieUtil.addCookie("agent", new_agent_id, response);
			
			String cookiefiles = CookieUtil.findCookie("file", request);
			CookieUtil.deleteCookie("file", response);
			if(cookiefiles != null && !cookiefiles.equals("")){
				String[] file_ids = cookiefiles.split("_");
				for(int i=0;i<file_ids.length;i++){
					fileCookie = fileService.getFileById(Integer.parseInt(file_ids[i]));
					if(fileCookie.getArch().equals(arch)&&fileCookie.getOstype().equals(ostype)){
						fileCookie.setStatus(2);
						fileService.updateFile(fileCookie);
						files.add(fileCookie);
					}else{
						new_file_id = file_ids[i] + "_" + new_file_id;
					}
				}
			}
			if(new_file_id.length()>=1){
				new_file_id = new_file_id.substring(0,new_file_id.length()-1);
			}
			CookieUtil.addCookie("file", new_file_id, response);
			
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		
		try {
			String filename = ostype + "_" + arch + ".xml";
			
			String classname = this.getClass().toString();
			 String pathname = this.getClass()
			         .getResource(classname.substring(classname.lastIndexOf(".") + 1) + ".class")
			         .getPath();
			String propath = pathname.substring(0, pathname.indexOf("/WEB-INF"))  +java.io.File.separatorChar + "download" +java.io.File.separatorChar  + filename;
			
			
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");// 设置日期格式
			Document document = DocumentHelper.createDocument();
			document.setXMLEncoding("UTF-8");
			Element rootElement = document.addElement("UpdateInfo");
			rootElement.addElement("UpdateTime").addText(df.format(new Date()));
			boolean flag = false;
			
			for (Agent agent : agents) {
					flag = true;
					Element agentElement = rootElement.addElement("Agent");
					agentElement.addElement("Name").addText(agent.getName());
					agentElement.addElement("Filename")
						.addText(agent.getFilename());
					agentElement.addElement("DownloadURI")
							.addText(agent.getDownloaduri());
					agentElement.addElement("Md5sum")
							.addText(agent.getMd5sum());
					agentElement.addElement("Version")
					.addText(agent.getVersion());
					agentElement.addElement("LoadOnStartup").addText(String.valueOf(agent.getLoadonstartup()));
			}
			for (File file : files) {
					flag = true;
					Element fileElement = rootElement.addElement("File");
					fileElement.addElement("Filename")
						.addText(file.getFilename());
					fileElement.addElement("DownloadURI")
							.addText(file.getDownloaduri());
					fileElement.addElement("Md5sum")
							.addText(file.getMd5sum());
			}
			if(flag){
				java.io.File xmlfile = new java.io.File(propath);
				if (xmlfile.exists()) {
					xmlfile.createNewFile();
				}
				FileOutputStream fos = new FileOutputStream(xmlfile);
				OutputFormat format = OutputFormat.createPrettyPrint();
				format.setEncoding("utf-8");
				XMLWriter writer = new XMLWriter(fos, format);
				result = "1";
				writer.write(document);
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	@RequestMapping(value = "/login.do", method = RequestMethod.POST)
	public @ResponseBody String login(@RequestParam String username,@RequestParam String password,HttpServletRequest request,HttpServletResponse response) {
		String result = "0";
		HttpSession session = request.getSession();
		List<User> users = userService.getUserByUsername(username);
		if(users != null){//0代表密码错误，2代表没有该用户，1代表登陆成功。
			for(User user : users){
				if(user.getPassword().equals(password)){
					session.setAttribute("user", user);
					result="1";
				}
			}
		}else{
			result = "2";
		}
		return result;
	}
	
}
