package com.chinaops.web.agent.base;

import java.io.Serializable;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.chinaops.web.agent.entity.Page;

/**
 * Description: 持久层封装基础方法
 * Copyright (c) Department of Research and Development/Beijing/china-ops.
 * All Rights Reserved.
 * @param <T>
 * @version 1.0  2013-8-20 上午09:53:59 崔万哲 (cuiwanzhe@china-ops.com) 创建
 */
@SuppressWarnings({ "unchecked" })
public class GenericHibernateDao<T> {
	private SessionFactory sessionFactory;

	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	/** Dao所管理的Entity类型 */
	private Class<T> entityClass;

	public GenericHibernateDao() {
		entityClass = GenericsHelper.getSuperClassGenricType(getClass());
	}

	/**
	 * Description: 根据主键查询
	 * @Version 1.0 2013-8-20 上午09:54:18崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param id
	 * @return
	 */
	public T getByPk(Serializable id) {
		Session session = getSessionFactory().openSession();
		T object = null;
		try {
			Transaction tx = session.beginTransaction();
			object = (T) session.get(entityClass, id);
			tx.commit();
		} catch (HibernateException e) {
			session.getTransaction().rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
		return object;
	}

	/**
	 * Description: 获取所有
	 * @Version 1.0 2013-8-20 上午09:54:33崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @return
	 */
	public List<T> findAll() {
		return (List<T>) this.find("from " + entityClass.getName(), null);
	}

	/**
	 * Description: 保存
	 * @Version 1.0 2013-8-20 上午09:54:58崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param entity
	 */
	public void create(T entity) {
		Session session = getSessionFactory().openSession();
		try {
			Transaction tx = session.beginTransaction();
			session.save(entity);
			tx.commit();
		} catch (Exception e) {
			session.getTransaction().rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
	}

	/**
	 * Description: 编辑
	 * @Version 1.0 2013-8-20 上午09:55:12崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param entity
	 */
	public void update(T entity) {
		Session session = getSessionFactory().openSession();
		try {
			Transaction tx = session.beginTransaction();
			session.update(entity);
			tx.commit();
		} catch (Exception e) {
			session.getTransaction().rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}

	}

	/**
	 * Description: 
	 * @Version 1.0 2013-8-20 上午09:55:27崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param entity
	 */
	public void merge(T entity) {
		Session session = getSessionFactory().openSession();
		try {
			Transaction tx = session.beginTransaction();
			session.merge(entity);
			tx.commit();
		} catch (Exception e) {
			session.getTransaction().rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
	}

	/**
	 * Description: 删除
	 * @Version 1.0 2013-8-20 上午09:55:38崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param entity
	 */
	public void delete(T entity) {
		Session session = getSessionFactory().openSession();
		try {
			Transaction tx = session.beginTransaction();
			session.delete(entity);
			tx.commit();
		} catch (Exception e) {
			session.getTransaction().rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
	}

	/**
	 * Description: 查询
	 * @Version 1.0 2013-8-20 上午09:55:53崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param hql
	 * @return
	 */
	public List<T> find(String hql) {
		return this.find(hql, null);
	}

	/**
	 * Description: 查询
	 * @Version 1.0 2013-8-20 上午09:56:06崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param hql
	 * @param obj
	 * @return
	 */
	public List<T> find(String hql, Object obj) {
		return this.find(hql, new Object[] { obj });
	}

	/**
	 * Description: 查询
	 * @Version 1.0 2013-8-20 上午09:56:18崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param hql
	 * @param values
	 * @return
	 */
	public List<T> find(String hql, Object[] values) {
		Session session = getSessionFactory().openSession();
		Transaction tx = session.beginTransaction();
		List<T> list = null;
		try {
			Query query = session.createQuery(hql);
			if ((values != null && values.length > 0)) {
				for (int i = 0; i < values.length; i++) {
					query.setParameter(i, values[i]);
				}
			}
			list = query.list();
			tx.commit();
		} catch (Exception e) {
			session.getTransaction().rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
		return list;
	}

	/**
	 * Description: 执行增删改
	 * @Version 1.0 2013-8-20 上午09:56:32崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param hql
	 * @param values
	 * @return
	 */
	public int executeUpdate(String hql, Object values) {
		return this.executeUpdate(hql, new Object[] { values });
	}

	/**
	 * Description: 执行增删改
	 * @Version 1.0 2013-8-20 上午09:56:44崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param hql
	 * @param values
	 * @return
	 */
	public int executeUpdate(String hql, Object[] values) {
		int result = 0;
		Session session = getSessionFactory().openSession();
		Transaction tx = session.beginTransaction();
		try {
			Query query = session.createQuery(hql);
			if ((values != null && values.length > 0)) {
				for (int i = 0; i < values.length; i++) {
					query.setParameter(i, values[i]);
				}
			}
			result = query.executeUpdate();
			tx.commit();
		} catch (Exception e) {
			session.getTransaction().rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
		return result;
	}

	/**
	 * Description: 
	 * @Version 1.0 2013-8-20 上午09:56:55崔万哲(cuiwanzhe@china-ops.com) 创建
	 * @param sql
	 * @param values
	 * @return
	 */
	public Query createSqlQuery(String sql, Object[] values) {
		Session session = getSessionFactory().openSession();
		Transaction tx = session.beginTransaction();
		Query query = session.createSQLQuery(sql);
		try {
			if ((values != null && values.length > 0)) {
				for (int i = 0; i < values.length; i++) {
					query.setParameter(i, values[i]);
				}
			}
			tx.commit();
		} catch (Exception e) {
			session.getTransaction().rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
		return query;
	}
	
    /**
     * Description: 封装分页方法
     * @Version 1.0 2013-8-27 上午09:47:56崔万哲(cuiwanzhe@china-ops.com) 创建
     * @param hql
     * @param currentPage
     * @param page_size
     * @return
     */
    public Page findByPage(String hql,int currentPage, int page_size) {
    	return this.findByPage(hql, currentPage, page_size, null);
    }
    
    /**
     * Description: 封装分页方法
     * @Version 1.0 2013-8-27 上午09:48:10崔万哲(cuiwanzhe@china-ops.com) 创建
     * @param hql
     * @param currentPage
     * @param page_size
     * @param objs
     * @return
     */
    public Page findByPage(String hql,int currentPage, int page_size,Object[] objs) {
	if (hql == null)
	    throw new IllegalArgumentException("NULL is not a valid string");
	
	Session session = getSessionFactory().openSession();
	Transaction tx = session.beginTransaction();
	Page page = new Page();
	try {
	    final String countSql = "select count(*) " + hql;
	    Query count_q = null;
	    Query query = null;
	    if(objs==null){
		count_q = session.createQuery(countSql);
		query = session.createQuery(hql);
	    }else{//增加参数
		count_q = session.createQuery(countSql);
		query = session.createQuery(hql);
		if((objs != null && objs.length > 0)){
		    for (int i = 0; i < objs.length; i++) {		
			query.setParameter(i, objs[i]);
			count_q.setParameter(i, objs[i]);
		    }
		}
	    }
	    // 总记录数
	    page.setTotalNumber(Integer.parseInt(count_q.list().get(0).toString()));
	    // 当前页
	    page.setCurrentPage(currentPage);
	    // 分页的数据
	    page.setList(query.setFirstResult((currentPage - 1) * page_size).setMaxResults(page_size).list());
	    // 总页数
	    page.setTotalPage(page.getTotalNumber() % page_size == 0 ? page.getTotalNumber() / page_size : page.getTotalNumber() / page_size + 1);
	    tx.commit();
	} catch (Exception e) {
	    if(session != null && session.isOpen()){
		session.close();
	    }	    
	    e.printStackTrace();
	} finally {
	    if(session != null && session.isOpen()){
		session.close();
	    }
	}
	return page;
    }
}
